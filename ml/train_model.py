#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
train_model.py
Gera o modelo de recomenda√ß√£o baseado em regras de associa√ß√£o (FPGrowth)
usando o dataset real do Spotify (/home/datasets/spotify/2023_spotify_ds1.csv)
e salva o resultado em /data/model.pkl (volume compartilhado).
"""

import os
import pandas as pd
import pickle
from ast import literal_eval
from fpgrowth_py import fpgrowth


# Caminhos configur√°veis
DATA_PATH = os.getenv("DATA_PATH", "/home/datasets/spotify/2023_spotify_ds1.csv")
OUTPUT_PATH = os.getenv("OUTPUT_PATH", "/data/model.pkl")


def load_playlist_data(data_path: str):
    """Carrega o dataset e transforma cada playlist em lista de m√∫sicas"""
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Dataset n√£o encontrado em {data_path}")

    print(f"‚úÖ Dataset encontrado em {data_path}")
    df = pd.read_csv(data_path)
    print(f"üßæ Colunas dispon√≠veis: {list(df.columns)}")

    # Tenta encontrar automaticamente uma coluna que contenha as m√∫sicas
    song_col = None
    for c in df.columns:
        if 'song' in c.lower() or 'track' in c.lower():
            song_col = c
            break

    if not song_col:
        raise ValueError("‚ùå Nenhuma coluna relacionada a m√∫sicas ('song' ou 'track') encontrada no dataset.")

    print(f"üéµ Usando coluna '{song_col}' para extrair playlists...")

    itemSetList = []
    total_rows = len(df)
    for i, entry in enumerate(df[song_col].dropna()):
        try:
            # Converte string JSON-like para lista real
            songs = literal_eval(entry) if isinstance(entry, str) else entry
            if isinstance(songs, (list, tuple)) and songs:
                # Normaliza nomes (remove espa√ßos, converte para str)
                songs = [str(s).strip() for s in songs if s]
                itemSetList.append(songs)
        except Exception:
            continue

        if (i + 1) % 10000 == 0:
            print(f"üì¶ Processadas {i+1}/{total_rows} playlists...")

    print(f"üìö Total de playlists v√°lidas: {len(itemSetList)}")
    if len(itemSetList) == 0:
        raise ValueError("‚ùå Nenhuma playlist v√°lida encontrada ap√≥s processamento!")

    return itemSetList


def main():
    print("üöÄ Iniciando gera√ß√£o do modelo de recomenda√ß√£o Spotify...")

    try:
        itemSetList = load_playlist_data(DATA_PATH)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao processar dataset real: {e}")
        print("‚ö†Ô∏è Caindo para dados fict√≠cios para garantir execu√ß√£o.\n")
        itemSetList = [
            ['rock', 'pop'],
            ['rock', 'metal'],
            ['pop', 'dance'],
            ['metal', 'rock'],
        ]

    print("üìä Iniciando FPGrowth (minSupRatio=0.5, minConf=0.5)...")
    try:
        freqItemSet, rules = fpgrowth(itemSetList, minSupRatio=0.5, minConf=0.5)
        if not rules:
            print("‚ö†Ô∏è Nenhuma regra gerada, dataset pode estar muito disperso.")
    except Exception as e:
        print(f"‚ùå Erro durante gera√ß√£o de regras: {e}")
        rules = []

    os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)
    with open(OUTPUT_PATH, "wb") as f:
        pickle.dump(rules, f)

    print(f"üíæ Modelo salvo com sucesso em {OUTPUT_PATH}")
    print(f"‚úÖ Total de regras geradas: {len(rules)}")
    print("üèÅ Treinamento conclu√≠do.")


if __name__ == "__main__":
    main()
