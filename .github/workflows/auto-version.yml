name: Auto Version & Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'ml/**'
      - 'api/**'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to build (ml, api, or both)'
        required: true
        default: 'both'
        type: choice
        options:
          - ml
          - api
          - both

env:
  DOCKER_USERNAME: tassiolucas

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      ml_changed: ${{ steps.changes.outputs.ml }}
      api_changed: ${{ steps.changes.outputs.api }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changed files
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger
            if [ "${{ inputs.component }}" = "ml" ] || [ "${{ inputs.component }}" = "both" ]; then
              echo "ml=true" >> $GITHUB_OUTPUT
            fi
            if [ "${{ inputs.component }}" = "api" ] || [ "${{ inputs.component }}" = "both" ]; then
              echo "api=true" >> $GITHUB_OUTPUT
            fi
          else
            # Auto detect
            git diff --name-only HEAD^ HEAD > changed_files.txt
            if grep -q "^ml/" changed_files.txt; then
              echo "ml=true" >> $GITHUB_OUTPUT
            else
              echo "ml=false" >> $GITHUB_OUTPUT
            fi
            if grep -q "^api/" changed_files.txt; then
              echo "api=true" >> $GITHUB_OUTPUT
            else
              echo "api=false" >> $GITHUB_OUTPUT
            fi
          fi

  bump-ml-version:
    name: Bump ML Version
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ml_changed == 'true'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Bump version
        id: bump
        run: |
          # Extrai versão atual
          CURRENT=$(grep "image: ${DOCKER_USERNAME}/tp2-ml:" k8s/job-ml.yaml | awk -F: '{print $NF}' | tr -d ' ')
          echo "Current ML version: $CURRENT"
          
          # Incrementa versão
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}"
          
          echo "New ML version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Atualiza YAML
          sed -i "s|image: ${DOCKER_USERNAME}/tp2-ml:${CURRENT}|image: ${DOCKER_USERNAME}/tp2-ml:${NEW_VERSION}|g" k8s/job-ml.yaml
      
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add k8s/job-ml.yaml
          git commit -m "chore: bump ML version to ${{ steps.bump.outputs.new_version }} [skip ci]" || echo "No changes"
          git push

  bump-api-version:
    name: Bump API Version
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api_changed == 'true'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Bump version
        id: bump
        run: |
          # Extrai versão atual
          CURRENT=$(grep "image: ${DOCKER_USERNAME}/tp2-api:" k8s/deployment.yaml | awk -F: '{print $NF}' | tr -d ' ')
          echo "Current API version: $CURRENT"
          
          # Incrementa versão
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}"
          
          echo "New API version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Atualiza YAML
          sed -i "s|image: ${DOCKER_USERNAME}/tp2-api:${CURRENT}|image: ${DOCKER_USERNAME}/tp2-api:${NEW_VERSION}|g" k8s/deployment.yaml
      
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add k8s/deployment.yaml
          git commit -m "chore: bump API version to ${{ steps.bump.outputs.new_version }} [skip ci]" || echo "No changes"
          git push

  build-ml:
    name: Build & Push ML
    runs-on: ubuntu-latest
    needs: bump-ml-version
    if: always() && needs.bump-ml-version.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Pega versão atualizada
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./ml
          file: ./ml/Dockerfile.improved
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/tp2-ml:${{ needs.bump-ml-version.outputs.new_version }}
            ${{ env.DOCKER_USERNAME }}/tp2-ml:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-api:
    name: Build & Push API
    runs-on: ubuntu-latest
    needs: bump-api-version
    if: always() && needs.bump-api-version.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Pega versão atualizada
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/tp2-api:${{ needs.bump-api-version.outputs.new_version }}
            ${{ env.DOCKER_USERNAME }}/tp2-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, bump-ml-version, bump-api-version, build-ml, build-api]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Deployment Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.bump-ml-version.result }}" = "success" ]; then
            echo "✅ **ML**: Versão ${{ needs.bump-ml-version.outputs.new_version }} buildada e enviada" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.detect-changes.outputs.ml_changed }}" = "true" ]; then
            echo "❌ **ML**: Build falhou" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **ML**: Sem mudanças" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.bump-api-version.result }}" = "success" ]; then
            echo "✅ **API**: Versão ${{ needs.bump-api-version.outputs.new_version }} buildada e enviada" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.detect-changes.outputs.api_changed }}" = "true" ]; then
            echo "❌ **API**: Build falhou" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **API**: Sem mudanças" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Próximos Passos" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD detectará as mudanças em ~3 minutos" >> $GITHUB_STEP_SUMMARY
          echo "2. Novos pods serão criados automaticamente" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitore: \`kubectl -n tassioalmeida get pods -w\`" >> $GITHUB_STEP_SUMMARY

